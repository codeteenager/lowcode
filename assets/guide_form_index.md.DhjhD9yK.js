import{_ as a,c as i,o as e,a6 as l}from"./chunks/framework.QaOTJ2ON.js";const m=JSON.parse('{"title":"可视化表单","description":"","frontmatter":{},"headers":[],"relativePath":"guide/form/index.md","filePath":"guide/form/index.md","lastUpdated":1711035979000}'),t={name:"guide/form/index.md"},r=l('<h1 id="可视化表单" tabindex="-1">可视化表单 <a class="header-anchor" href="#可视化表单" aria-label="Permalink to &quot;可视化表单&quot;">​</a></h1><p>在数字化时代，企业面临着海量的数据和复杂的业务需求，对于低代码表单的需求也逐渐增加，低代码表单可以提高企业的业务处理效率，还可以降低开发成本，缩短开发周期。</p><h2 id="低代码表单应用场景​" tabindex="-1">低代码表单应用场景​ <a class="header-anchor" href="#低代码表单应用场景​" aria-label="Permalink to &quot;低代码表单应用场景​&quot;">​</a></h2><p>低代码的表单主要用于数据采集、流程审批和业务运营等场景，可以帮助企业更高效地管理数据和处理业务，提升企业的竞争力。另外，它还具有快速搭建、灵活定制、数据整合和易于维护等优势，可以根据企业的实际需求进行定制和开发，满足各种复杂的业务需求。</p><ul><li>数据采集：通过表单，企业可以方便地收集客户、员工或其他相关方的信息，如联系方式、反馈意见、需求等，用于后续的业务处理或数据分析。</li><li>流程审批：表单可以作为企业内部审批流程的一部分，通过表单提交申请，各级审批人在表单中进行审批操作，实现流程的自动化和简化。</li><li>业务运营：企业可以利用表单来处理销售订单、库存管理、物流配送等业务流程中的数据输入和操作，提高工作效率。</li></ul><h2 id="表单引擎的作用" tabindex="-1">表单引擎的作用 <a class="header-anchor" href="#表单引擎的作用" aria-label="Permalink to &quot;表单引擎的作用&quot;">​</a></h2><ul><li>功能的实时性，实现与后端数据的联动性，实现配置立即实现相关工；</li><li>组件的实用性，通过配置能支持日常企业级的场景的需求，对一些复杂表单的支持能力，数据数据的动态数据能力；</li><li>交互的易用性，降低人员的使用门槛，尽量让业务人员深度参与 ；</li></ul><h2 id="表单设计器介绍" tabindex="-1">表单设计器介绍 <a class="header-anchor" href="#表单设计器介绍" aria-label="Permalink to &quot;表单设计器介绍&quot;">​</a></h2><p>表单设计器包括页面信息设置、表单可视化设计、页面权限设计、联动数据处理。</p><h2 id="表单设计器功能区" tabindex="-1">表单设计器功能区 <a class="header-anchor" href="#表单设计器功能区" aria-label="Permalink to &quot;表单设计器功能区&quot;">​</a></h2><p>设计器包括：组件区、画布区、样式属性配置区、表单操作</p><h2 id="表单组件列表" tabindex="-1">表单组件列表 <a class="header-anchor" href="#表单组件列表" aria-label="Permalink to &quot;表单组件列表&quot;">​</a></h2><p>表单组件目前分为基础组件、高级组件与扩展组件</p><h2 id="基础配置过程" tabindex="-1">基础配置过程 <a class="header-anchor" href="#基础配置过程" aria-label="Permalink to &quot;基础配置过程&quot;">​</a></h2><p>配置流程：拖拽组件进入画布&gt;&gt;绑定数据&gt;&gt;设置属性控制&gt;&gt;设置样式控制&gt;&gt;按钮设置&gt;&gt;预览效果</p><ol><li>组件展示区域，可以将组件拖拽进入表单画布</li><li>点击组件的标签，右侧弹出组件的设置面板</li><li>在组件设置面板中可以设计与组件相关的细节配置，包括绑定数据、设置样式、配置联动等操作</li><li>可预览表单配置的效果</li><li>可设置表单界面上的提交等按钮的触发逻辑</li></ol><h2 id="基础属性控制" tabindex="-1">基础属性控制 <a class="header-anchor" href="#基础属性控制" aria-label="Permalink to &quot;基础属性控制&quot;">​</a></h2><p>表单的基础属性控制包括对显隐状态、默认数据、动态公式、数据联动等</p><ol><li>配置组件的名称与组件绑定数据模型字段</li><li>设置组件的可用模式，普通模式（可读、可写），只读模式（可读不可改），隐藏（不可见，不可改）</li><li>设置组件的默认值，自定义可以设置固定的默认值，如果选择公式时，系统通过函数配置的内容自动计算内容结果</li><li>显示控制可根据其他组件的结果进行控制本组件的显示条件，实现动态的显隐控制</li><li>禁用控制可根据其他组件的结果进控制本组件的使用状态，实现动态的组件可用性控制</li><li>网络设置（逻辑触发），组件一旦失焦时触发相应的逻辑（常用于对数据的复杂校验等）</li><li>数据联动是当前组件的数据依赖于其他组件的数据变换而随之调整</li></ol>',19),o=[r];function d(h,n,s,c,u,_){return e(),i("div",null,o)}const f=a(t,[["render",d]]);export{m as __pageData,f as default};
